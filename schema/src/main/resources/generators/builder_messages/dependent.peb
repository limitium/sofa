{% set pojo = entity | from("pojo_messages") %}
{% set fbm = entity | from("flatbuffers_messages") %}
package {{ entity.namespace }};

import com.google.flatbuffers.FlatBufferBuilder;
import java.nio.ByteBuffer;
import {{ pojo.fullname }};
import {{ fbm.fullname }};

public class {{ entity.name }}{

    public static int buildFlatbufferFrom(FlatBufferBuilder flatBufferBuilder, {{ pojo.name }} dependent) {
        {% for field in entity | flattenFields -%}
            {%- if field.type.name == 'array' -%}
                {%- if field.type.elementType.name == 'string' -%}

                    int[] {{ field.name }}_offsets = dependent.{{ field.name | replace({'_':'.'}) }}.stream()
                        .map(flatBufferBuilder::createString)
                        .mapToInt(v -> v)
                        .toArray();

                    int {{ field.name }} = {{ fbm.name }}.create{{ field.name | capitalize }}Vector(flatBufferBuilder, {{ field.name }}_offsets);
                {%- endif -%}
                {%- if field.type.elementType.name == 'enum' -%}
                    {%- set fbmnum = field.type.elementType.enum | from("flatbuffers_messages") -%}


                    byte[] {{ field.name }}_offsets = new byte[dependent.{{ field.name | replace({'_':'.'}) }}.size()];
                    for (int i = 0; i < dependent.{{ field.name }}.size(); i++) {
                        {{ field.name }}_offsets[i] = findEnumIndex({{ fbmnum.fullname }}.names, dependent.{{ field.name }}.get(i).name());
                    }

                    int {{ field.name }} = {{ fbm.name }}.create{{ field.name | capitalize }}Vector(flatBufferBuilder, {{ field.name }}_offsets);
                {%- endif -%}
                {%- if field.type.elementType.name == 'record' -%}

                    
                    int[] {{ field.name }}_offsets = new int[dependent.{{ field.name | replace({'_':'.'}) }}.size()];
                    for (int i = 0; i < dependent.{{ field.name }}.size(); i++) {
                        {{ field.name }}_offsets[i]={{ field.type.elementType.record.fullname }}.buildFlatbufferFrom(flatBufferBuilder, dependent.{{ field.name }}.get(i));
                    }

                    int {{ field.name }} = {{ fbm.name }}.create{{ field.name | capitalize }}Vector(flatBufferBuilder, {{ field.name }}_offsets);
                {%- endif -%}
            {%- endif -%}
        {% endfor %}


        {{ fbm.name }}.start{{ fbm.name }}(flatBufferBuilder);

        {% for field in entity | flattenFields('.') -%}
            {%- set fbFieldName = field.name | replace({'.':'_'}) | toCamelCase -%}

            {%- if field.type | fbIsPrimitive -%}
               {{ fbm.name }}.add{{ fbFieldName | capitalize }}(flatBufferBuilder, dependent.{{ field.name }});
            {%- else -%}
                {%- if field.type.name == 'string' -%}
                    {{ fbm.name }}.add{{ fbFieldName | capitalize }}(flatBufferBuilder, dependent.{{ field.name }} != null ? flatBufferBuilder.createString(dependent.{{ field.name }}) : null);
                {%- endif -%}
                {%- if field.type.name == 'enum' -%}
                    {%- set fbmnum = field.type.enum | from("flatbuffers_messages") -%}
                    {{ fbm.name }}.add{{ fbFieldName | capitalize }}(flatBufferBuilder, findEnumIndex({{ fbmnum.fullname }}.names, dependent.{{ field.name }}.name()));
                {%- endif -%}
                {%- if field.type.name == 'array' -%}
                    {{ fbm.name }}.add{{ fbFieldName | capitalize }}(flatBufferBuilder, {{ field.name }});
                {%- endif -%}
                {%- if field.type.name == 'bytes' -%}
                    {{ fbm.name }}.add{{ fbFieldName | capitalize }}(flatBufferBuilder, dependent.{{ field.name }} != null ? flatBufferBuilder.createByteVector(dependent.{{ field.name }}) : null);
                {%- endif -%}
            {%- endif -%}

        {% endfor -%}
    }

    public static {{ pojo.name }} buildPojoFrom({{ fbm.name }} fbDependent) {
        {{ pojo.name }} dependent = new {{ pojo.name }}();

        {% for field in entity | flattenRecords('.') %}
            {%- set pojoRecord = field.type.record | from("pojo_messages")  -%}
            dependent.{{ field.name }} = new {{ pojoRecord.fullname }}() ;
        {% endfor %}

        {% for field in entity | flattenFields('.') -%}
            {%- set fbFieldName = field.name | replace({'.':'_'}) | toCamelCase -%}
            {%- if field.type | fbIsPrimitive -%}
                        dependent.{{ field.name  }} = fbDependent.{{ fbFieldName }}();
                    {%- else -%}
                {%- if field.type.name == 'string' -%}
                            dependent.{{ field.name }} = fbDependent.{{ fbFieldName }}();
                    {%- endif -%}
                {%- if field.type.name == 'enum' -%}
                    {%- set fbmnum = field.type.enum | from("flatbuffers_entities") -%}
                    {%- set pojoEnum = field.type.enum | from("pojo_messages") -%}
                            dependent.{{ field.name }} = fbDependent.{{ fbFieldName }}() == 0 ? null : {{ pojoEnum.fullname }}.valueOf({{  fbmnum.fullname }}.name(fbDependent.{{ fbFieldName }}()));
                    {%- endif -%}
                {%- if field.type.name == 'array' -%}
                    {%- if field.type.elementType.name == 'string' -%}
                            dependent.{{ field.name }} = java.util.stream.IntStream.range(0, fbDependent.{{ fbFieldName }}Length()).mapToObj(i->fbDependent.{{ fbFieldName }}Vector().get(i)).toList();
                        {%- endif -%}
                    {%- if field.type.elementType.name == 'enum' -%}
                        {% set pojoEnum = field.type.elementType.enum | from("pojo_messages") %}
                            dependent.{{ field.name }} = java.util.stream.IntStream.range(0, fbDependent.{{ fbFieldName }}Length()).mapToObj(i->{{ pojoEnum.fullname }}.values()[fbDependent.{{ fbFieldName }}Vector().get(i)]).toList();
                        {%- endif -%}
                    {%- if field.type.elementType.name == 'record' -%}
                            dependent.{{ field.name }} = java.util.stream.IntStream.range(0, fbDependent.{{ fbFieldName }}Length()).mapToObj(i->{{ field.type.elementType.record.fullname }}.buildPojoFrom(fbDependent.{{ fbFieldName }}Vector().get(i))).toList();
                        {%- endif -%}
                {%- endif -%}
                {%- if field.type.name == 'bytes' -%}
                        dependent.{{ field.name }} = fbDependent.{{ fbFieldName }}AsByteBuffer() != null ? fbDependent.{{ fbFieldName }}AsByteBuffer().array() : null;
                    {%- endif -%}
            {% endif %}

        {% endfor -%}
        return dependent;
    }

    private static byte findEnumIndex(String[] enumNames, String name) {
        for (byte i = 0; i < enumNames.length; i++) {
            if (enumNames[i] != null && enumNames[i].equals(name)) {
                return i;
            }
        }
        return 0;
    }
}




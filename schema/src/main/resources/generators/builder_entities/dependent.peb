{% set pojo = entity | from("pojo_entities") %}
{% set fbe = entity | from("flatbuffers_entities") %}
package {{ entity.namespace }};

import com.google.flatbuffers.FlatBufferBuilder;
import java.nio.ByteBuffer;
import {{ pojo.fullname }};
import {{ fbe.fullname }};

public class {{ entity.name }}{

    public static {{ fbe.name }} buildFlatbufferFrom({{ pojo.name }} dependent) {
        {% set owners = entity | flattenOwners %}

        FlatBufferBuilder flatBufferBuilder = new FlatBufferBuilder().forceDefaults(true);
        {% for field in entity | flattenFields('.') | noRecordLists -%}
            {%- set fieldName = field.name | toCamelCase -%}
            {%- set fbFieldName = fieldName | replace({'.':'_'}) | toCamelCase -%}
            {%- if ["array", "string", "bytes"] contains field.type.name -%}
                int {{ fbFieldName }} = 0;
            {%- endif %}
        {% endfor %}

        {% for field in entity | flattenFieldsWithRecords('.') | noRecordLists -%}
            {%- set fieldName = field.name | toCamelCase -%}
            {%- set fbFieldName = fieldName | replace({'.':'_'}) | toCamelCase -%}
            {%- if field.type.name == 'array' -%}
                {%- if field.type.elementType.name == 'string' -%}
                    int[] {{ fbFieldName }}Offsets = dependent.{{ fieldName }}.stream()
                        .map(flatBufferBuilder::createString)
                        .mapToInt(v -> v)
                        .toArray();

                    {{ fbFieldName }} = flatBufferBuilder.createVectorOfTables({{ fbFieldName }}Offsets);
                {%- endif -%}
                {%- if field.type.elementType.name == 'enum' -%}
                    {%- set fbenum = field.type.elementType.enum | from("flatbuffers_entities") -%}


                    byte[] {{ fbFieldName }}Offsets = new byte[dependent.{{ fieldName }}.size()];
                    for (int i = 0; i < dependent.{{ field.name }}.size(); i++) {
                        {{ fbFieldName }}Offsets[i] = findEnumIndex({{ fbenum.fullname }}.names, dependent.{{ fieldName }}.get(i));
                    }

                    {{ fbFieldName }} = {{ fbe.name }}.create{{ fbFieldName | capitalize }}Vector(flatBufferBuilder, {{ fbFieldName }}Offsets);
                {%- endif -%}
            {%- endif %}
             {%- if field.type.name == 'string' -%}
                {{ fbFieldName }} = dependent.{{ fieldName }} != null ? flatBufferBuilder.createString(dependent.{{ fieldName }}) : 0;
            {%- endif %}
            {%- if field.type.name == 'bytes' -%}
                {{ fbFieldName }} = dependent.{{ fieldName }} != null ? flatBufferBuilder.createByteVector(root.{{ fieldName }}) : 0;
            {%- endif %}
            {%- if field.type.name == 'record' -%}
                if (dependent.{{ fieldName }} != null) {
            {%- endif %}
            {%- if field.type.name == 'recordClose' -%}
                }
            {%- endif %}
        {% endfor %}

        {% if owners.size > 0 %}
            {% if owners.size > 1 %}
                int ownerEntity =  flatBufferBuilder.createString(dependent.ownerEntity);
            {% endif %}
        {% endif %}

        {{ fbe.name }}.start{{ fbe.name }}(flatBufferBuilder);

        {% for field in entity | flattenFieldsWithRecords('.') -%}
            {%- set fieldName = field.name | toCamelCase -%}
            {%- set fbFieldName = fieldName | replace({'.':'_'}) | toCamelCase -%}

            {%- if field.type | fbIsPrimitive -%}
                    {{ fbe.name }}.add{{ fbFieldName | capitalize }}(flatBufferBuilder, dependent.{{ fieldName }});
            {% else %}
                {% if field.type.name == 'string' %}
                    if({{ fbFieldName }} != 0){
                        {{ fbe.name }}.add{{ fbFieldName | capitalize }}(flatBufferBuilder, {{ fbFieldName }});
                    }
                {% endif %}
                {%- if field.type.name == 'enum' -%}
                    {%- set fbmnum = field.type.enum | from("flatbuffers_entities") -%}
                    {{ fbe.name }}.add{{ fbFieldName | capitalize }}(flatBufferBuilder, findEnumIndex({{ fbmnum.fullname }}.names, dependent.{{ fieldName }}));
                {%- endif -%}
                {%- if field.type.name == 'array' -%}
                    {{ fbe.name }}.add{{ fbFieldName | capitalize }}(flatBufferBuilder, {{ fbFieldName }});
                {%- endif -%}
                {%- if field.type.name == 'bytes' -%}
                    {{ fbe.name }}.add{{ fbFieldName | capitalize }}(flatBufferBuilder, {{ fbFieldName }});
                {%- endif -%}
                {%- if field.type.name == 'record' -%}
                    if (dependent.{{ fieldName }} != null) {
                {%- endif %}
                {%- if field.type.name == 'recordClose' -%}
                    }
                {%- endif %}
            {%- endif %}

        {% endfor -%}


        {% if owners.size > 0 %}
            //Links do dependents {{ owners.size }} total
        {% if owners.size == 1 %}
            {% set fbOwner = owners[0] | from("flatbuffers_entities") %}
            {% set pojoOwner = owners[0] | from("pojo_entities") %}
            {{ fbe.name }}.add{{ fbOwner.name }}Id(flatBufferBuilder, dependent.{{ pojoOwner.name | toCamelCase }}Id);
        {% endif %}
            {% if owners.size > 1 %}
                //Todo: check entities
                {% for owner in owners %}
                    //{{ owner.name }}

                {% endfor %}
                {{ fbe.name }}.addOwnerEntity(flatBufferBuilder, ownerEntity);
                {{ fbe.name }}.addOwnerId(flatBufferBuilder, dependent.ownerId);
            {% endif %}
        {% endif %}

        return {{ fbe.name }}.getRootAs{{ fbe.name }}(ByteBuffer.wrap(flatBufferBuilder.sizedByteArray()));
    }

    public static {{ pojo.name }} buildPojoFrom({{ fbe.name }} fbDependent) {
        {{ pojo.name }} dependent = new {{ pojo.name }}();

        {% for field in entity | flattenRecords('.') %}
            {%- set pojoRecord = field.type.record | from("pojo_entities")  -%}
            {% if not pojoRecord.dependent and not pojoRecord.owner %}
                {%- set pojoRecord = pojoRecord | from("pojo_common")  -%}
            {% endif %}
            dependent.{{ field.name | toCamelCase }} = new {{ pojoRecord.fullname }}() ;
        {% endfor %}

        {% for field in entity | flattenFields('.') | noRecordLists -%}
            {%- set fieldName = field.name | toCamelCase -%}
            {%- set fbFieldName = fieldName | replace({'.':'_'}) | toCamelCase -%}

            {%- if field.type | fbIsPrimitive -%}
                dependent.{{ fieldName  }} = fbDependent.{{ fbFieldName }}();
            {%- else -%}
                {%- if field.type.name == 'string' -%}
                    dependent.{{ fieldName }} = fbDependent.{{ fbFieldName }}();
                {%- endif -%}
                {%- if field.type.name == 'enum' -%}
                    {%- set fbenum = field.type.enum | from("flatbuffers_entities") -%}
                    {%- set pojoEnum = field.type.enum | from("pojo_common") -%}
                    dependent.{{ fieldName }} = fbDependent.{{ fbFieldName }}() == 0 ? null : {{ pojoEnum.fullname }}.valueOf({{  fbenum.fullname }}.name(fbDependent.{{ fbFieldName }}()));
                {%- endif -%}
                {%- if field.type.name == 'array' -%}
                    {%- if field.type.elementType.name == 'string' -%}
                        dependent.{{ fieldName }} = java.util.stream.IntStream.range(0, fbDependent.{{ fbFieldName }}Length()).mapToObj(i->fbDependent.{{ fbFieldName }}Vector().get(i)).toList();
                    {%- endif -%}
                    {%- if field.type.elementType.name == 'enum' -%}
                        {% set pojoEnum = field.type.elementType.enum | from("pojo_common") %}
                        {%- set fbmnum = field.type.elementType.enum | from("flatbuffers_entities") -%}
                        dependent.{{ fieldName }} = java.util.stream.IntStream.range(0, fbRoot.{{ fbFieldName }}Length()).mapToObj(i->findEnum({{ pojoEnum.fullname }}.values(), {{ fbmnum.fullname }}.name(fbDependent.{{ fbFieldName }}Vector().get(i)))).toList();
                    {%- endif -%}
                {%- endif -%}
                {%- if field.type.name == 'bytes' -%}
                    ByteBuffer buffer{{ fbFieldName }} = fbRoot.{{ fbFieldName }}AsByteBuffer();
                    if (fbRoot.{{ fbFieldName }}AsByteBuffer() != null) {
                        byte[] bytes{{ fbFieldName }} = new byte[buffer{{ fbFieldName }}.remaining()];
                        buffer{{ fbFieldName }}.get(bytes{{ fbFieldName }});
                        root.{{ fieldName }} = bytes{{ fbFieldName }};
                    } else {
                        root.{{ fieldName }} = null;
                    }
                {%- endif -%}
            {% endif %}

        {% endfor -%}

        {% if owners.size > 0 %}
                //Links do dependents {{ owners.size }} total
            {% if owners.size == 1 %}
                {% set fbOwner = owners[0] | from("flatbuffers_entities") %}
                {% set owner = owners[0] | from("pojo_entities") %}
                dependent.{{ owner.name | toCamelCase }}Id = fbDependent.{{ fbOwner.name | toCamelCase }}Id();
            {% endif %}
            {% if owners.size > 1 %}
                dependent.ownerEntity = fbDependent.ownerEntity();
                dependent.ownerId = fbDependent.ownerId();
            {% endif %}
        {% endif %}

        return dependent;
    }

    private static byte findEnumIndex(String[] enumNames, Enum<?> enumVal) {
        if(enumVal == null){
            return 0;
        }
        for (byte i = 0; i < enumNames.length; i++) {
            if (enumNames[i] != null && enumNames[i].equals(enumVal.name())) {
                return i;
            }
        }
        return 0;
    }

    private static <E extends Enum<E>> E findEnum(E[] enums, String name) {
        for (E enumConstant : enums) {
            if(enumConstant.name().equals(name)){
                return enumConstant;
            }
        }
        return null;
    }
}




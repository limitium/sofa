{% set pojo = entity | from("pojo_messages") %}
{% set serde = entity | from("serde_messages") %}
package {{ entity.namespace }};

import com.google.gson.Gson;
import org.apache.kafka.common.errors.SerializationException;
import org.apache.kafka.common.serialization.Serde;
import org.apache.kafka.connect.data.Schema;
import org.apache.kafka.connect.data.SchemaAndValue;

import org.apache.kafka.connect.data.SchemaBuilder;
import org.apache.kafka.connect.data.Struct;
import org.apache.kafka.connect.errors.DataException;
import org.apache.kafka.connect.storage.Converter;

import {{ pojo.fullname }};
import {{ serde.fullname }};

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Map;
import java.util.stream.Collectors;


public class {{ entity.name }} implements Converter {
    Gson gson = new Gson();
    {{ serde.name }} serde = getSerde();

    @Override
    public void configure(Map<String, ?> configs, boolean isKey){

    }

    @Override
    public byte[] fromConnectData(String topic, Schema schema, Object value) {
        if (value == null) {
            return null;
        }
        try {
            if (value instanceof Struct struct) {
                return serde.serializer().serialize(topic, createObject(schema, struct));
            }
            return null;
        } catch (SerializationException e) {
            throw new DataException("Failed to serialize to a string: ", e);
        }
    }

    @Override
    public SchemaAndValue toConnectData(String topic, byte[] value) {
        SchemaBuilder builder = SchemaBuilder.struct().name("{{ pojo.fullname }}");
        Schema schema = fillSchema(builder).build();

        Struct struct = null;
        if (value != null) {
            struct = new Struct(schema);
            {{ pojo.name }} pojo = serde.deserializer().deserialize(topic, value);
            fillStruct(struct, pojo);
        }
        return new SchemaAndValue(schema, struct);
    }


    public SchemaBuilder fillSchema(SchemaBuilder builder){
        return builder
            {% for field in entity | flattenFields('_') -%}
                .field("{{ field.name | toSnakeCase | upper }}", {{ field.type | connectSchemaType }})
            {% endfor %}
        ;
    }

    public void fillStruct(Struct struct, {{ pojo.name }} obj){
        struct
            {% for field in entity | flattenFields('.') %}
                {% set fieldName =  field.name | replace({'.':'_'}) | toSnakeCase | upper %}
                {% set objFieldName = field.name | toCamelCase %}
                {% if field.type | fbIsPrimitive %}
                    .put("{{ fieldName }}", obj.{{ objFieldName }})
                {% else %}
                    {% if field.type.name == 'string' %}
                        .put("{{ fieldName }}", obj.{{ objFieldName }})
                    {% endif %}
                    {% if field.type.name == 'enum' %}
                        {%- set fbEnum = field.type.enum | from("flatbuffers_entities") %}
                        {%- set pojoEnum = field.type.enum | from("pojo_messages") %}
                        .put("{{ fieldName }}", obj.{{ objFieldName }} != null ? obj.{{ objFieldName }}.name() : null)
                    {% endif %}
                    {% if field.type.name == 'array' %}
                        {%- if field.type.elementType.name == 'string' %}
                            .put("{{ fieldName }}", obj.{{ objFieldName }} != null ? String.join(";;;", obj.{{ objFieldName }}) : null)
                        {% endif %}
                        {% if field.type.elementType.name == 'enum' %}
                            {% set pojoEnum = field.type.elementType.enum | from("pojo_messages") %}
                            .put("{{ fieldName }}", obj.{{ objFieldName }} != null ? obj.{{ objFieldName }}.stream().map(Enum::name).collect(Collectors.joining(",")) : null)
                        {% endif %}
                        {% if field.type.elementType.name == 'record' %}
                            .put("{{ fieldName }}", obj.{{ objFieldName }} != null ? gson.toJson(obj.{{ objFieldName }}) : null)
                        {% endif %}
                    {% endif %}
                    {% if field.type.name == 'bytes' %}
                        .put("{{ fieldName }}", obj.{{ objFieldName }})
                    {% endif %}
                {% endif %}
            {% endfor %}
        ;
    }

    public {{ pojo.name }} createObject(Schema schema, Struct struct){
        {{ pojo.name }} obj = new {{ pojo.name }}();

        {% for field in entity | flattenRecords('.') %}
            {%- set fieldName = field.name | toCamelCase -%}
            {%- set pojoRecord = field.type.record | from("pojo_messages")  -%}
            {% if not pojoRecord.dependent %}
                {%- set pojoRecord = pojoRecord | from("pojo_messages")  -%}
            {% endif %}
            obj.{{ fieldName }} = new {{ pojoRecord.fullname }}() ;
        {% endfor %}

        {% for field in entity | flattenFields('.') -%}
            {%- set fieldName = field.name | toCamelCase -%}
            {%- set structFieldName = field.name| replace({'.':'_'}) | toSnakeCase | upper -%}
            {%- set structGetter = field.type | connectStructGetter -%}

            {%- if field.type | fbIsPrimitive -%}
                    obj.{{ fieldName  }} = struct.{{ structGetter }}("{{ structFieldName }}");
            {%- else -%}
                {%- if field.type.name == 'string' -%}
                    obj.{{ fieldName  }} = struct.{{ structGetter }}("{{ structFieldName }}");
                {%- endif -%}
                {%- if field.type.name == 'enum' -%}
                        {%- set fbEnum = field.type.enum | from("flatbuffers_entities") -%}
                        {%- set pojoEnum = field.type.enum | from("pojo_messages") -%}
                        obj.{{ fieldName  }} = struct.{{ structGetter }}("{{ structFieldName }}") != null ? {{ pojoEnum.fullname }}.valueOf(struct.{{ structGetter }}("{{ structFieldName }}")): null;
                {%- endif -%}
                {%- if field.type.name == 'array' -%}
                    {%- if field.type.elementType.name == 'string' -%}
                        obj.{{ fieldName }} = struct.{{ structGetter }}("{{ structFieldName }}") != null ? new ArrayList<>(Arrays.stream(struct.{{ structGetter }}("{{ structFieldName }}").split(";;;")).toList()) : null;
                    {%- endif -%}
                    {%- if field.type.elementType.name == 'enum' -%}
                        {% set pojoEnum = field.type.elementType.enum | from("pojo_messages") %}
                        obj.{{ fieldName }} = struct.{{ structGetter }}("{{ structFieldName }}") != null ? new ArrayList<>(Arrays.stream(struct.{{ structGetter }}("{{ structFieldName }}").split(",")).map({{ pojoEnum.fullname }}::valueOf).toList()) : null;
                    {%- endif -%}
                    {% if field.type.elementType.name == 'record' %}
                        {% set pojoRecord = field.type.elementType.record | from("pojo_messages") %}
                        obj.{{ fieldName }} = struct.{{ structGetter }}("{{ structFieldName }}") != null ? new ArrayList<>(Arrays.asList(gson.fromJson(struct.{{ structGetter }}("{{ structFieldName }}"), {{ pojoRecord.fullname }}[].class))) : null;
                    {%- endif -%}
                {%- endif -%}
                {%- if field.type.name == 'bytes' -%}
                        obj.{{ fieldName  }} = struct.{{ structGetter }}("{{ structFieldName }}");
                {%- endif -%}
            {% endif %}

        {% endfor -%}
        return obj;
    }

    public {{ serde.name }} getSerde() {
        return new {{ serde.name }}();
    }
}